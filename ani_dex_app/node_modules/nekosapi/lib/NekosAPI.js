"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NekosAPI = void 0;
var url_1 = require("url");
var NekosImage_1 = __importDefault(require("./NekosImage"));
var preventRateLimit_1 = require("./preventRateLimit");
var NekosAPI = /** @class */ (function () {
    function NekosAPI(token) {
        if (token && NekosAPI.validateToken(token)) {
            this.token = token;
        }
        this.baseUrl = "https://v1.nekosapi.com/api/";
        NekosAPI.lastRequest = new Date();
    }
    NekosAPI.prototype.getImages = function (limit, offset) {
        if (limit === void 0) { limit = 10; }
        if (offset === void 0) { offset = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var options, url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.token)
                            throw new Error("You need a valid access token to use this method.");
                        options = {
                            method: "GET",
                            headers: {
                                "Authorization": "Bearer ".concat(this.token),
                            },
                        };
                        url = new url_1.URL("".concat(this.baseUrl, "image?"));
                        url.searchParams.append("offset", String(offset));
                        url.searchParams.append("limit", String(limit));
                        return [4 /*yield*/, fetch(url, options)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, NekosAPI.checkResponseCode(response)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 3: return [2 /*return*/, (_a.sent())["data"]
                            .map(function (image) { return new NekosImage_1.default(image); })];
                }
            });
        });
    };
    NekosAPI.prototype.getRandomImages = function (categories, limit) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this._getRandomImages(categories, limit)];
            });
        });
    };
    NekosAPI.prototype.getRandomImage = function (categories) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getRandomImages(categories, 1)];
                    case 1: return [2 /*return*/, (_a.sent())[0]];
                }
            });
        });
    };
    NekosAPI.prototype._getRandomImages = function (categories, limit) {
        return __awaiter(this, void 0, void 0, function () {
            var query, limitQuery, url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = categories
                            ? Array.isArray(categories)
                                ? categories.join(",")
                                : categories || ""
                            : "";
                        limitQuery = limit || 1;
                        url = new url_1.URL("".concat(this.baseUrl, "image/random?"));
                        url.searchParams.append("categories", query);
                        url.searchParams.append("limit", String(limitQuery));
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, NekosAPI.checkResponseCode(response)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 3: return [2 /*return*/, (_a.sent())["data"]
                            .map(function (image) { return new NekosImage_1.default(image); })];
                }
            });
        });
    };
    NekosAPI.prototype.getImageByID = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = new url_1.URL("".concat(this.baseUrl, "image/").concat(id));
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        response = _b.sent();
                        return [4 /*yield*/, NekosAPI.checkResponseCode(response)];
                    case 2:
                        _b.sent();
                        _a = NekosImage_1.default.bind;
                        return [4 /*yield*/, response.json()];
                    case 3: return [2 /*return*/, new (_a.apply(NekosImage_1.default, [void 0, (_b.sent())["data"]]))()];
                }
            });
        });
    };
    NekosAPI.prototype.getArtistByID = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = new url_1.URL("".concat(this.baseUrl, "artist/").concat(id));
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, NekosAPI.checkResponseCode(response)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 3: return [2 /*return*/, (_a.sent())["data"]];
                }
            });
        });
    };
    NekosAPI.prototype.getImagesByArtistID = function (id, limit, offset) {
        if (limit === void 0) { limit = 10; }
        if (offset === void 0) { offset = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = new url_1.URL("".concat(this.baseUrl, "artist/").concat(id, "/images?"));
                        url.searchParams.append("limit", String(limit));
                        url.searchParams.append("offset", String(offset));
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, NekosAPI.checkResponseCode(response)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 3: return [2 /*return*/, (_a.sent())["data"]
                            .map(function (image) { return new NekosImage_1.default(image); })];
                }
            });
        });
    };
    NekosAPI.prototype.getCharacterByID = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = new url_1.URL("".concat(this.baseUrl, "character/").concat(id));
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, NekosAPI.checkResponseCode(response)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 3: return [2 /*return*/, (_a.sent())["data"]];
                }
            });
        });
    };
    NekosAPI.prototype.getCategories = function (limit, offset) {
        if (limit === void 0) { limit = 10; }
        if (offset === void 0) { offset = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = new url_1.URL("".concat(this.baseUrl, "category?"));
                        url.searchParams.append("limit", String(limit));
                        url.searchParams.append("offset", String(offset));
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, NekosAPI.checkResponseCode(response)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 3: return [2 /*return*/, (_a.sent())["data"]];
                }
            });
        });
    };
    NekosAPI.prototype.getCategoryByID = function (categoryID) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = new url_1.URL("".concat(this.baseUrl, "category/").concat(categoryID));
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, NekosAPI.checkResponseCode(response)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 3: return [2 /*return*/, (_a.sent())["data"]];
                }
            });
        });
    };
    NekosAPI.validateToken = function (token) {
        var _a;
        if ((token && !((_a = token.match(NekosAPI.tokenRegex)) === null || _a === void 0 ? void 0 : _a.length)) || !token) {
            throw new Error("The token is invalid. It should be 100 characters long and contain numbers and lowercase/uppercase characters.");
        }
        else {
            return true;
        }
    };
    NekosAPI.checkResponseCode = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if ((response.status > 200 && response.status <= 300) || !response.ok) {
                    throw new Error("An error occurred while fetching the data from the server. ".concat(response.statusText, ". Status: ").concat(response.status));
                }
                return [2 /*return*/];
            });
        });
    };
    /*
    * Last time a request was sent to the API
    */
    NekosAPI.lastRequest = new Date();
    NekosAPI.tokenRegex = /^[0-9a-zA-Z]{100}$/g;
    __decorate([
        (0, preventRateLimit_1.preventRateLimit)()
    ], NekosAPI.prototype, "getImages", null);
    __decorate([
        (0, preventRateLimit_1.preventRateLimit)()
    ], NekosAPI.prototype, "getRandomImages", null);
    __decorate([
        (0, preventRateLimit_1.preventRateLimit)()
    ], NekosAPI.prototype, "getRandomImage", null);
    __decorate([
        (0, preventRateLimit_1.preventRateLimit)()
    ], NekosAPI.prototype, "getImageByID", null);
    __decorate([
        (0, preventRateLimit_1.preventRateLimit)()
    ], NekosAPI.prototype, "getArtistByID", null);
    __decorate([
        (0, preventRateLimit_1.preventRateLimit)()
    ], NekosAPI.prototype, "getImagesByArtistID", null);
    __decorate([
        (0, preventRateLimit_1.preventRateLimit)()
    ], NekosAPI.prototype, "getCharacterByID", null);
    __decorate([
        (0, preventRateLimit_1.preventRateLimit)()
    ], NekosAPI.prototype, "getCategories", null);
    __decorate([
        (0, preventRateLimit_1.preventRateLimit)()
    ], NekosAPI.prototype, "getCategoryByID", null);
    return NekosAPI;
}());
exports.NekosAPI = NekosAPI;
//# sourceMappingURL=NekosAPI.js.map